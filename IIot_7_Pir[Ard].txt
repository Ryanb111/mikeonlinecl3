int pirPin = 2; // PIR sensor output pin
int ledPin = 13; // LED pin
int buzzerPin = 12; // Buzzer pin

void setup() {
  pinMode(pirPin, INPUT); // Set PIR sensor pin as input
  pinMode(ledPin, OUTPUT); // Set LED pin as output
  pinMode(buzzerPin, OUTPUT); // Set buzzer pin as output
  Serial.begin(9600); // Initialize serial communication for debugging
}

void loop() {
  int pirState = digitalRead(pirPin); // Read PIR sensor state

  if (pirState == HIGH) {
    digitalWrite(ledPin, HIGH); // Turn on LED
    digitalWrite(buzzerPin, HIGH); // Turn on buzzer
    Serial.println("Motion detected!"); // Print message to serial monitor
  } else {
    digitalWrite(ledPin, LOW); // Turn off LED
    digitalWrite(buzzerPin, LOW); // Turn off buzzer
    Serial.println("No motion."); // Print message to serial monitor
  }

  delay(1000); // Wait for a second before checking again
}



### **Explanation of the Code**

This Arduino program interfaces with a **PIR (Passive Infrared) sensor** to detect motion. When motion is detected, an LED lights up, a buzzer sounds, and a message is printed to the serial monitor.

---

### **Code Breakdown**

#### **1. Variable Declarations**
```cpp
int pirPin = 2;       // PIR sensor output pin connected to digital pin 2
int ledPin = 13;      // Built-in LED pin
int buzzerPin = 12;   // Buzzer pin connected to digital pin 12
```

- **`pirPin`**: Input pin where the PIR sensor's output is connected.
- **`ledPin`**: The LED pin is used to provide visual feedback for motion detection.
- **`buzzerPin`**: The buzzer pin is used to provide an audible alert.

---

#### **2. `setup()` Function**
```cpp
void setup() {
  pinMode(pirPin, INPUT);       // Configure PIR pin as an input
  pinMode(ledPin, OUTPUT);      // Configure LED pin as an output
  pinMode(buzzerPin, OUTPUT);   // Configure buzzer pin as an output
  Serial.begin(9600);           // Begin serial communication for debugging
}
```

- **`pinMode()`**:
  - Sets `pirPin` as input to read the motion detection signal.
  - Configures `ledPin` and `buzzerPin` as outputs to control the LED and buzzer.
- **`Serial.begin(9600)`**: Initializes communication with the serial monitor at 9600 baud rate.

---

#### **3. `loop()` Function**
```cpp
void loop() {
  int pirState = digitalRead(pirPin); // Read the PIR sensor's state

  if (pirState == HIGH) {            // Motion detected
    digitalWrite(ledPin, HIGH);      // Turn on LED
    digitalWrite(buzzerPin, HIGH);   // Turn on buzzer
    Serial.println("Motion detected!");  // Log message to serial monitor
  } else {                           // No motion detected
    digitalWrite(ledPin, LOW);       // Turn off LED
    digitalWrite(buzzerPin, LOW);    // Turn off buzzer
    Serial.println("No motion.");   // Log message to serial monitor
  }

  delay(1000); // Wait 1 second before the next check
}
```

- **`digitalRead(pirPin)`**: Reads the state of the PIR sensor. 
  - **HIGH**: Motion detected.
  - **LOW**: No motion detected.
- **Actions for HIGH State**:
  - LED lights up.
  - Buzzer turns on.
  - Message "Motion detected!" is sent to the serial monitor.
- **Actions for LOW State**:
  - LED and buzzer are turned off.
  - Message "No motion." is sent to the serial monitor.

- **`delay(1000)`**: Waits for 1 second before rechecking the PIR sensor. This avoids rapid toggling of the LED and buzzer.

---

### **Output**

#### **Hardware Behavior**:
1. **When Motion is Detected**:
   - LED lights up.
   - Buzzer makes a sound.
   - Serial monitor displays:
     ```
     Motion detected!
     ```

2. **When No Motion is Detected**:
   - LED turns off.
   - Buzzer stops.
   - Serial monitor displays:
     ```
     No motion.
     ```

---

### **Key Concepts**

#### **1. PIR Sensor Functionality**
- A PIR sensor detects motion based on changes in infrared radiation (heat) from objects in its field of view.

#### **2. Digital Input/Output**
- **Digital Input (`pirPin`)**: Reads binary states (HIGH or LOW) from the sensor.
- **Digital Output (`ledPin`, `buzzerPin`)**: Controls the state of the LED and buzzer.

#### **3. Serial Communication**
- Provides a mechanism to debug the system by logging messages to the Arduino Serial Monitor.

---

### **Common Examiner Questions**

1. **How does the PIR sensor detect motion?**
   - The PIR sensor detects motion by sensing changes in infrared radiation caused by moving objects.

2. **Why is there a delay in the `loop()` function?**
   - The delay prevents rapid toggling of the LED and buzzer and reduces false positives by allowing the sensor to stabilize.

3. **What happens if the PIR sensor's sensitivity is too high?**
   - The sensor might generate false positives, detecting motion even when there is none. Adjusting its sensitivity potentiometer can resolve this.

4. **Why use `digitalRead()` and `digitalWrite()`?**
   - `digitalRead()` reads the state of the input pin (HIGH or LOW).
   - `digitalWrite()` sets the output pin state to HIGH or LOW.




Sure! Let’s break down the code and explain all the basic concepts related to the Arduino platform, along with the specific code functions:

### What is Arduino?

Arduino is an open-source electronics platform based on easy-to-use hardware and software. It consists of a microcontroller board that can be programmed to perform various tasks, and it has a set of input/output (I/O) pins for interacting with the physical world (e.g., sensors, motors, lights, etc.). The board is programmed using the Arduino IDE (Integrated Development Environment), which allows you to write and upload code to the microcontroller.

In this case, you're using an **Arduino** board to control sensors, lights, and a buzzer based on motion detection.

### The Code Explained:

```cpp
int pirPin = 2; // PIR sensor output pin
int ledPin = 13; // LED pin
int buzzerPin = 12; // Buzzer pin
```

- **`pirPin`**: This is the digital pin (pin 2) connected to the output of the **PIR sensor**. The PIR sensor detects motion, and it sends a digital signal to the Arduino board. 
  - **HIGH** (1): Motion detected.
  - **LOW** (0): No motion detected.
  
- **`ledPin`**: This is the digital pin (pin 13) connected to an **LED**. The LED will light up when motion is detected.
  
- **`buzzerPin`**: This is the digital pin (pin 12) connected to a **buzzer**. The buzzer will sound when motion is detected.

---

### The `setup()` Function:

```cpp
void setup() {
  pinMode(pirPin, INPUT); // Set PIR sensor pin as input
  pinMode(ledPin, OUTPUT); // Set LED pin as output
  pinMode(buzzerPin, OUTPUT); // Set buzzer pin as output
  Serial.begin(9600); // Initialize serial communication for debugging
}
```

- **`pinMode(pin, mode)`**: This function is used to configure a specific pin on the Arduino board as either an **input** or an **output**.
  - `INPUT`: The pin will read data from a sensor or another device (like the PIR sensor).
  - `OUTPUT`: The pin will send data to an actuator or device (like the LED or buzzer).

  In this case:
  - `pirPin` is configured as `INPUT` because it's receiving data from the PIR sensor.
  - `ledPin` and `buzzerPin` are configured as `OUTPUT` because the Arduino will control the LED and buzzer.

- **`Serial.begin(9600)`**: This initializes serial communication between the Arduino and your computer, so you can print messages to the **Serial Monitor** for debugging. The number `9600` is the baud rate, which refers to the data transfer speed (9600 bits per second).

---

### The `loop()` Function:

```cpp
void loop() {
  int pirState = digitalRead(pirPin); // Read PIR sensor state

  if (pirState == HIGH) {
    digitalWrite(ledPin, HIGH); // Turn on LED
    digitalWrite(buzzerPin, HIGH); // Turn on buzzer
    Serial.println("Motion detected!"); // Print message to serial monitor
  } else {
    digitalWrite(ledPin, LOW); // Turn off LED
    digitalWrite(buzzerPin, LOW); // Turn off buzzer
    Serial.println("No motion."); // Print message to serial monitor
  }

  delay(1000); // Wait for a second before checking again
}
```

The `loop()` function runs continuously after the `setup()` function has been called. It is the core of most Arduino programs, repeatedly executing the code inside it as long as the Arduino is powered.

### 1. **Reading the PIR sensor**:

```cpp
int pirState = digitalRead(pirPin); // Read PIR sensor state
```

- **`digitalRead(pin)`**: This function reads the digital state (HIGH or LOW) of the specified pin.
  - **`pirPin`** (pin 2) is connected to the PIR sensor. The sensor will output a HIGH (1) signal when it detects motion and LOW (0) when no motion is detected.
  - `pirState` will store the state of the sensor (HIGH or LOW).

### 2. **Conditional Logic (if/else)**:

```cpp
if (pirState == HIGH) {
    digitalWrite(ledPin, HIGH); // Turn on LED
    digitalWrite(buzzerPin, HIGH); // Turn on buzzer
    Serial.println("Motion detected!"); // Print message to serial monitor
} else {
    digitalWrite(ledPin, LOW); // Turn off LED
    digitalWrite(buzzerPin, LOW); // Turn off buzzer
    Serial.println("No motion."); // Print message to serial monitor
}
```

- **`if (pirState == HIGH)`**: This checks whether the PIR sensor has detected motion (i.e., `pirState` is HIGH).
  - If motion is detected:
    - **`digitalWrite(pin, HIGH)`**: This sends a HIGH signal to the specified pin, turning on the LED and the buzzer.
    - **`Serial.println("Motion detected!")`**: This sends the message "Motion detected!" to the Serial Monitor so that you can see the output in real-time.
  
  - **`else`**: If no motion is detected (`pirState` is LOW), the LED and buzzer are turned off, and a message "No motion" is printed to the Serial Monitor.

### 3. **Adding a Delay**:

```cpp
delay(1000); // Wait for a second before checking again
```

- **`delay(ms)`**: This function pauses the program for the specified number of milliseconds. Here, `delay(1000)` makes the program wait for 1 second (1000 milliseconds) before checking the PIR sensor state again.
  - This helps to avoid repeatedly triggering the LED and buzzer without a break and gives you time to observe changes.

---

### Key Components Explained:

1. **PIR Sensor**:
   - The **PIR (Passive Infrared) sensor** detects infrared radiation, which is emitted by objects with a temperature above absolute zero (e.g., humans and animals).
   - When a person or animal moves within its detection range, the PIR sensor sends a HIGH signal to the Arduino. Otherwise, it sends a LOW signal.

2. **LED**:
   - A simple **LED** (Light Emitting Diode) lights up when a HIGH signal is sent to its corresponding pin. It is used here to visually indicate motion detection.

3. **Buzzer**:
   - The **buzzer** produces a sound when it receives a HIGH signal. It's used here to alert you when motion is detected.

4. **Serial Monitor**:
   - The **Serial Monitor** in the Arduino IDE allows you to view messages sent from the Arduino to your computer for debugging or monitoring purposes. It helps you see the real-time status of the system (e.g., whether motion is detected or not).

---

### Summary of Program Flow:

1. The program starts by setting up the pins for the PIR sensor, LED, and buzzer in the `setup()` function.
2. In the `loop()` function:
   - The Arduino continuously reads the state of the PIR sensor.
   - If motion is detected, the LED and buzzer are activated, and a message is printed to the Serial Monitor.
   - If no motion is detected, the LED and buzzer are turned off, and a different message is printed to the Serial Monitor.
3. The program waits for 1 second between sensor checks (due to the `delay(1000)`).

---

### Summary of Functions and Concepts:

- **`pinMode(pin, mode)`**: Configures the pin as input or output.
- **`digitalRead(pin)`**: Reads the state of a digital input pin (HIGH or LOW).
- **`digitalWrite(pin, value)`**: Sets the state of a digital output pin (HIGH or LOW).
- **`Serial.begin(baud_rate)`**: Starts serial communication at a specific baud rate.
- **`Serial.println()`**: Prints messages to the Serial Monitor.
- **`delay(ms)`**: Pauses the program for a specified number of milliseconds.

This is a simple motion detection system using an Arduino, and it can be expanded or modified for various applications, such as security systems, automation, and more.
